/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<Integer>();
        
        if(root == null){
            return result;
        } 

        return result = helper(root, result);
    }

    private List<Integer> helper(TreeNode root, List<Integer> result){
        
        result.add(root.val);

        if(root.left != null){
            result = helper(root.left, result);
        }

        if(root.right != null){
            result = helper(root.right, result);
        }

        return result;
    }
}

// return이 필요했던 이유는 재귀적으로 호출된 함수의 반환값을 상위 함수가 사용해야 했기 때문, 재귀 호출이 순차적으로 이루어지면 되기 때문에, 재귀 호출의 결과를 반환할 필요는 없습니다
